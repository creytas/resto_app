# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
# commands:
#   print_pipeline_id_command:
#     steps:
#       - run: echo ${CIRCLE_WORKFLOW_ID}
jobs:
  # set_aws_credential:
  #   docker:
  #     - image:  &image amazon/aws-cli:latest
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Use ansible to login"
  #         command: |
  #           aws configure set

  create_infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: "Create Cloudformation Stack"
          command:  | 
            aws cloudformation deploy --template-file template.yml --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} --region us-east-1 --profile creytas
  # save_hello_world_output:
  #   # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
  #   docker:
  #     - image: &image cimg/base:stable
  #   # Add steps to the job
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#steps
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Say hello world in an output file"
  #         command: echo "Hello World" > ~/output.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - output.txt

  # print_output_file:
  #   # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
  #   docker:
  #     - image: *image
  #   # Add steps to the job
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#steps
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ~/

  #     - run:
  #         name: "Print the output file"
  #         command: cat ~/output.txt

  # print_pipeline_id:
  #   # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
  #   docker:
  #     - image: *image
  #   # Add steps to the job
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#steps
  #   steps:
  #     - checkout
  #     - print_pipeline_id_command

  # error_job:
  #   # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
  #   docker:
  #     - image: *image
  #   # Add steps to the job
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#steps
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Verify a job error"
  #         command: echo "There's no Error till now"
  #     - run:
  #         name: "On fail"
  #         command: echo "Error Found !"
  #         when: on_fail

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  create-infrastructure-workflow:
    jobs:
      - create_infrastructure
  # say-hello-workflow:
  #   jobs:
  #     - save_hello_world_output
  #     - print_pipeline_id
  #     - print_output_file:
  #         requires:
  #           - save_hello_world_output
  #     - error_job      

# VS Code Extension Version: 1.5.1